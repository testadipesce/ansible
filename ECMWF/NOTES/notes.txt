Environment setup:
#------------------------------------------------------------------------------#
Clone the Ansible repository: $ git clone https://github.com/ansible/ansible.git
Change directory into the repository root dir: $ cd ansible
Create a virtual environment: $ python3 -m venv venv (or for Python 2 $ virtualenv venv. Note, this requires you to install the virtualenv package: $ pip install virtualenv)
Activate the virtual environment: $ . venv/bin/activate
Update pip in venv before development requirements: $ python -m pip install -U pip
Install development requirements: $ pip install -r requirements.txt
Run the environment setup script for each new dev shell process: $ . hacking/env-setup


# hpcsupp@atos-logserv:~/ec_ansible
+ # . hacking/env-setup
+ #   +--> 04/21-12:40:41: ". hacking/env-setup"
+ running egg_info
+ creating lib/ansible_core.egg-info
+ writing lib/ansible_core.egg-info/PKG-INFO
+ writing dependency_links to lib/ansible_core.egg-info/dependency_links.txt
+ writing requirements to lib/ansible_core.egg-info/requires.txt
+ writing top-level names to lib/ansible_core.egg-info/top_level.txt
+ writing manifest file 'lib/ansible_core.egg-info/SOURCES.txt'
+ reading manifest file 'lib/ansible_core.egg-info/SOURCES.txt'
+ reading manifest template 'MANIFEST.in'
+ warning: no files found matching 'SYMLINK_CACHE.json'
+ warning: no previously-included files found matching 'docs/docsite/rst_warnings'
+ warning: no previously-included files found matching 'docs/docsite/rst/conf.py'
+ warning: no previously-included files found matching 'docs/docsite/rst/index.rst'
+ warning: no previously-included files matching '*' found under directory 'docs/docsite/_build'
+ warning: no previously-included files matching '*.pyc' found under directory 'docs/docsite/_extensions'
+ warning: no previously-included files matching '*.pyo' found under directory 'docs/docsite/_extensions'
+ warning: no files found matching '*.ps1' under directory 'lib/ansible/modules/windows'
+ 'test/integration/targets/ansible/ansible-test\udcc3\udca9.cfg' not utf-8 encodable -- skipping
+ 'test/integration/targets/template/templates/caf\udcc3\udca9.j2' not utf-8 encodable -- skipping
+ 'test/integration/targets/unarchive/files/test-unarchive-nonascii-\udce3\udc81\udc8f\udce3\udc82\udc89\udce3\udc81\udca8\udce3\udc81\udcbf.tar.gz' not utf-8 encodable -- skipping
+ 'test/integration/targets/unicode/k\udcc5\udc99\udcc3\udcad\udcc5\udcbeek-ansible-project/ansible.cfg' not utf-8 encodable -- skipping
+ 'test/integration/targets/vault/vault-caf\udcc3\udca9.yml' not utf-8 encodable -- skipping
+ warning: no files found matching '*.psm1' under directory 'test/support'
+ writing manifest file 'lib/ansible_core.egg-info/SOURCES.txt'
+ 
+ Setting up Ansible to run out of checkout...
+ 
+ PATH=/home/hpcsupp/ec_ansible/bin:/home/hpcsupp/ec_ansible/venv/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/hpcsupp/bin
+ PYTHONPATH=/home/hpcsupp/ec_ansible/lib
+ MANPATH=/home/hpcsupp/ec_ansible/docs/man:/usr/local/share/man:/usr/share/man
+ 
+ Remember, you may wish to specify your host file with -i
+ 
+ Done!











Note

After the initial setup above, every time you are ready to start developing Ansible you should be able to just run the following from the root of the Ansible repo: $ . venv/bin/activate && . hacking/env-setup



ECMWF ansible hacks:

1) 

lib/ansible/module_utils/basic.py and lib/ansible/utils/hashing.py have
been hacked such that for computationn of checksum of file objects, lines
containing "EC_GIT_TAG\s*=" are not considered (trace change with "git grep
EC_GIT_TAG"). 

TODO: enhance the hacks so that this custom behaviour is only present in
presence of ECMWF_ANSIBLE_HACKS=... value in environment or ansible variable
(on source and remote host!)



2) 

lib/ansible/module_utils/basic.py has been hacked that such if a file object has "backup=yes", the backup path is under <deploy_dir>/.eccfg/<filename>.ec_ansible_backup.<timestamp>

To chase in ansible code: git grep eccfg

TODO: condition this behaviour on ECMWF_ANSIBLE_HACKS vars



3) 

optional src-spec customisation by ansible-variable (e.g. for templates or files...)

lib/ansible/parsing/dataloader.py has been hacked (look for '?_') such that a "src" specification can be specialised based on an ansible variable/fact:

example:

    - name: motd
      template:
        src: ../templates/etc/?_{{ ansible_hostname }}_?/motd

When this runs on host with fact ansible_hostname="pi", it will pull the template from  

templates/etc/?_pi_?/motd, if such resource exists. If not, hacked ansible will one-by-one strip '?_<something>_?/' from the src spec, and check again 
for existence  - so would e.g. also try 'templates/etc/motd' if there is nothing for "pi". Such '?_<something>_?' can be used several times, stripping (currently) is performed from
left to right.


TODO: condition this extension on ECMWF_ANSIBLE_HACKS vars (although this does not change any default ansible behaviour, provided "non-weird" directory names only are used


