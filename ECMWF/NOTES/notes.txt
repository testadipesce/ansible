Environment setup:
#------------------------------------------------------------------------------#
1) Clone the Ansible repository: $ git clone https://github.com/ansible/ansible.git
Change directory into the repository root dir: $ cd ansible

2) Create a virtual environment (note: cna also create this OUTSIDE of the ansible repository): $ python3 -m venv venv (or for Python 2 $ virtualenv venv. Note, this requires you to install the virtualenv package: $ pip install virtualenv)

3) Activate the virtual environment: $ . venv/bin/activate

4) Update pip in venv before development requirements: $ python -m pip install -U pip
5) Install development requirements: $ pip install -r requirements.txt

6) Run the environment setup script for each new dev shell process: $ . hacking/env-setup



#------------------------------------------------------------------------------#
# ECMWF ansible hacks:
#------------------------------------------------------------------------------#

1) 

lib/ansible/module_utils/basic.py and lib/ansible/utils/hashing.py have
been hacked such that for computationn of checksum of file objects, lines
containing "EC_GIT_TAG\s*=" are not considered (trace change with "git grep
EC_GIT_TAG"). 

TODO: enhance the hacks so that this custom behaviour is only present in
presence of ECMWF_ANSIBLE_HACKS=... value in environment or ansible variable
(on source and remote host!)


2) 

lib/ansible/module_utils/basic.py has been hacked that such if a file object has "backup=yes", the backup path is under <deploy_dir>/.eccfg/<filename>.ec_ansible_backup.<timestamp>

To chase in ansible code: git grep eccfg

TODO: condition this behaviour on ECMWF_ANSIBLE_HACKS vars


3) 

optional src-spec customisation by ansible-variable (e.g. for templates or files...)

lib/ansible/parsing/dataloader.py has been hacked (look for '?_') such that a "src" specification can be specialised based on an ansible variable/fact:

example:

    - name: motd
      template:
        src: ../templates/etc/?_{{ ansible_hostname }}_?/motd

When this runs on host with fact ansible_hostname="pi", it will pull the template from  

templates/etc/?_pi_?/motd, if such resource exists. If not, hacked ansible will one-by-one strip '?_<something>_?/' from the src spec, and check again 
for existence  - so would e.g. also try 'templates/etc/motd' if there is nothing for "pi". Such '?_<something>_?' can be used several times, stripping (currently) is performed from
left to right.


TODO: condition this extension on ECMWF_ANSIBLE_HACKS vars (although this does not change any default ansible behaviour, provided "non-weird" directory names only are used
